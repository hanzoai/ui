---
title: Code Components
description: Comprehensive collection of code display and interaction components for developers.
component: true
---

import { ComponentPreview, ComponentSource } from "@/components/component-preview"
import { CodeDiff } from "@/registry/default/ui/code-diff"
import { CodeSnippet, InlineCode } from "@/registry/default/ui/code-snippet"
import { CodePreview } from "@/registry/default/ui/code-preview"
import { CodeTerminal } from "@/registry/default/ui/code-terminal"
import { CodeExplorer } from "@/registry/default/ui/code-explorer"
import { CodeCompare } from "@/registry/default/ui/code-compare"

<ComponentPreview name="code-components-demo">

A comprehensive suite of code-related components for displaying, editing, comparing, and executing code in your applications.

</ComponentPreview>

## Installation

<Tabs defaultValue="cli">

<TabsList>
  <TabsTrigger value="cli">CLI</TabsTrigger>
  <TabsTrigger value="manual">Manual</TabsTrigger>
</TabsList>

<TabsContent value="cli">

```bash
npx shadcn@latest add code-diff code-snippet code-preview code-terminal code-explorer code-compare
```

</TabsContent>

<TabsContent value="manual">

<Steps>

<Step>Install the required dependencies:</Step>

```bash
npm install shiki class-variance-authority lucide-react
```

<Step>Copy and paste the component source files into your project.</Step>

</Steps>

</TabsContent>

</Tabs>

## Components Overview

This collection includes six specialized code components:

- **CodeDiff**: Side-by-side and unified diff views
- **CodeSnippet**: Syntax-highlighted code display with copy functionality
- **CodePreview**: Live code execution environment
- **CodeTerminal**: Terminal emulator with command support
- **CodeExplorer**: File tree browser with search
- **CodeCompare**: Multi-file comparison tool

## Code Diff

Display code differences in side-by-side or unified views with line highlighting.

<ComponentPreview name="code-diff-demo">

```tsx
import { CodeDiff } from "@/components/ui/code-diff"

const oldCode = `function greet(name) {
  console.log("Hello, " + name);
}`

const newCode = `function greet(name, age) {
  console.log(\`Hello, \${name}! You are \${age} years old.\`);
}`

export default function CodeDiffDemo() {
  return (
    <CodeDiff
      oldCode={oldCode}
      newCode={newCode}
      language="javascript"
      filename="greet.js"
      showLineNumbers
      defaultView="unified"
    />
  )
}
```

</ComponentPreview>

### Props

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| `oldCode` | `string` | - | The original code content |
| `newCode` | `string` | - | The modified code content |
| `language` | `string` | `"text"` | Programming language for syntax highlighting |
| `filename` | `string` | - | Optional filename to display |
| `oldFilename` | `string` | - | Filename for the old version |
| `newFilename` | `string` | - | Filename for the new version |
| `showLineNumbers` | `boolean` | `true` | Show line numbers |
| `showCopyButton` | `boolean` | `true` | Show copy button |
| `defaultView` | `"unified" \| "split"` | `"unified"` | Default view mode |
| `collapseUnchanged` | `boolean` | `false` | Collapse unchanged sections |
| `contextLines` | `number` | `3` | Lines of context around changes |

## Code Snippet

Display syntax-highlighted code with copy functionality and various display options.

<ComponentPreview name="code-snippet-demo">

```tsx
import { CodeSnippet, InlineCode } from "@/components/ui/code-snippet"

const code = `export default function Button({ children, variant = "default", ...props }) {
  return (
    <button
      className={cn(buttonVariants({ variant }))}
      {...props}
    >
      {children}
    </button>
  )
}`

export default function CodeSnippetDemo() {
  return (
    <div className="space-y-4">
      <CodeSnippet
        code={code}
        language="tsx"
        filename="button.tsx"
        showLineNumbers
        highlightLines={[2, 3, 4]}
        expandable
      />

      <p>
        Use <InlineCode>npm install</InlineCode> to install dependencies.
      </p>
    </div>
  )
}
```

</ComponentPreview>

### Props

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| `code` | `string` | - | Code content to display |
| `language` | `string` | `"text"` | Programming language |
| `variant` | `"default" \| "inline" \| "minimal"` | `"default"` | Display variant |
| `filename` | `string` | - | Optional filename |
| `showLineNumbers` | `boolean` | `false` | Show line numbers |
| `highlightLines` | `number[]` | `[]` | Lines to highlight |
| `showCopyButton` | `boolean` | `true` | Show copy button |
| `expandable` | `boolean` | `false` | Allow expand/collapse |
| `collapsedHeight` | `string` | `"200px"` | Height when collapsed |
| `wrapLines` | `boolean` | `false` | Wrap long lines |

## Code Preview

Live code execution environment with preview and console output.

<ComponentPreview name="code-preview-demo">

```tsx
import { CodePreview } from "@/components/ui/code-preview"

const files = [
  {
    filename: "index.html",
    content: `<div id="app">
  <h1>Hello World</h1>
  <button onclick="changeColor()">Change Color</button>
</div>`,
    language: "html",
    type: "html" as const
  },
  {
    filename: "styles.css",
    content: `#app {
  padding: 20px;
  text-align: center;
  transition: all 0.3s ease;
}

h1 {
  color: #333;
  font-family: Arial, sans-serif;
}

button {
  padding: 10px 20px;
  background: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}`,
    language: "css",
    type: "css" as const
  },
  {
    filename: "script.js",
    content: `function changeColor() {
  const app = document.getElementById('app');
  const colors = ['#ffebee', '#e8f5e8', '#e3f2fd', '#fff3e0'];
  const randomColor = colors[Math.floor(Math.random() * colors.length)];

  app.style.backgroundColor = randomColor;
  console.log('Background color changed to:', randomColor);
}`,
    language: "javascript",
    type: "js" as const
  }
]

export default function CodePreviewDemo() {
  return (
    <CodePreview
      files={files}
      autoRun
      showPreview
      showConsole
      height="500px"
    />
  )
}
```

</ComponentPreview>

### Props

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| `files` | `PreviewFile[]` | - | Array of files to preview |
| `defaultFile` | `string` | - | Initially selected file |
| `showPreview` | `boolean` | `true` | Show preview panel |
| `showConsole` | `boolean` | `true` | Show console output |
| `autoRun` | `boolean` | `false` | Auto-execute on changes |
| `allowFullscreen` | `boolean` | `true` | Allow fullscreen mode |
| `customRunner` | `function` | - | Custom code execution function |

## Code Terminal

Terminal emulator with command support, history, and ANSI color codes.

<ComponentPreview name="code-terminal-demo">

```tsx
import { CodeTerminal } from "@/components/ui/code-terminal"
import { useState } from "react"

export default function CodeTerminalDemo() {
  const [lines, setLines] = useState([
    {
      id: "1",
      type: "system" as const,
      content: "Welcome to Hanzo Terminal v1.0",
      timestamp: Date.now()
    }
  ])

  const handleCommand = async (command: string) => {
    // Simulate command execution
    await new Promise(resolve => setTimeout(resolve, 500))

    if (command === "ls") {
      addLine({
        type: "output",
        content: "package.json  src/  docs/  README.md"
      })
    } else if (command.startsWith("cat ")) {
      const filename = command.slice(4)
      addLine({
        type: "output",
        content: `Contents of ${filename}:\n// Sample file content here`
      })
    } else if (command === "pwd") {
      addLine({
        type: "output",
        content: "/Users/developer/project"
      })
    } else {
      addLine({
        type: "error",
        content: `Command not found: ${command}`
      })
    }
  }

  const addLine = (line) => {
    setLines(prev => [...prev, {
      ...line,
      id: Date.now().toString(),
      timestamp: Date.now()
    }])
  }

  return (
    <CodeTerminal
      title="Project Terminal"
      prompt="$"
      allowInput
      allowClear
      onCommand={handleCommand}
      initialLines={lines}
      height="300px"
    />
  )
}
```

</ComponentPreview>

### Props

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| `title` | `string` | `"Terminal"` | Terminal window title |
| `prompt` | `string` | `"$"` | Command prompt symbol |
| `allowInput` | `boolean` | `true` | Allow command input |
| `allowClear` | `boolean` | `true` | Show clear button |
| `onCommand` | `function` | - | Command handler function |
| `history` | `string[]` | `[]` | Initial command history |
| `theme` | `"dark" \| "light" \| "matrix" \| "hacker" \| "retro"` | `"dark"` | Terminal theme |
| `autoScroll` | `boolean` | `true` | Auto-scroll to bottom |

## Code Explorer

File tree browser with search functionality and file icons.

<ComponentPreview name="code-explorer-demo">

```tsx
import { CodeExplorer } from "@/components/ui/code-explorer"
import { useState } from "react"

const sampleFiles = [
  {
    id: "1",
    name: "src",
    type: "folder" as const,
    path: "/src",
    children: [
      {
        id: "2",
        name: "components",
        type: "folder" as const,
        path: "/src/components",
        children: [
          {
            id: "3",
            name: "Button.tsx",
            type: "file" as const,
            path: "/src/components/Button.tsx",
            size: 1024,
            modified: new Date(),
            language: "typescript"
          },
          {
            id: "4",
            name: "Input.tsx",
            type: "file" as const,
            path: "/src/components/Input.tsx",
            size: 768,
            modified: new Date(),
            language: "typescript"
          }
        ]
      },
      {
        id: "5",
        name: "pages",
        type: "folder" as const,
        path: "/src/pages",
        children: [
          {
            id: "6",
            name: "index.tsx",
            type: "file" as const,
            path: "/src/pages/index.tsx",
            size: 2048,
            modified: new Date(),
            language: "typescript"
          }
        ]
      }
    ]
  },
  {
    id: "7",
    name: "package.json",
    type: "file" as const,
    path: "/package.json",
    size: 512,
    modified: new Date(),
    language: "json"
  }
]

export default function CodeExplorerDemo() {
  const [selectedFile, setSelectedFile] = useState("")

  return (
    <CodeExplorer
      files={sampleFiles}
      onFileSelect={(file) => {
        setSelectedFile(file.id)
        console.log("Selected file:", file.name)
      }}
      selectedFile={selectedFile}
      showSearch
      showFileIcons
      showFileSize
      height="300px"
      defaultExpanded={["1", "2"]}
    />
  )
}
```

</ComponentPreview>

### Props

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| `files` | `FileTreeNode[]` | - | File tree data |
| `onFileSelect` | `function` | - | File selection handler |
| `selectedFile` | `string` | - | Currently selected file ID |
| `showSearch` | `boolean` | `true` | Show search input |
| `showFileIcons` | `boolean` | `true` | Show file type icons |
| `showFileSize` | `boolean` | `false` | Show file sizes |
| `showModifiedDate` | `boolean` | `false` | Show modification dates |
| `defaultExpanded` | `string[]` | `[]` | Initially expanded folders |

## Code Compare

Multi-file comparison tool with side-by-side, unified, and three-way merge views.

<ComponentPreview name="code-compare-demo">

```tsx
import { CodeCompare } from "@/components/ui/code-compare"

const files = [
  {
    id: "1",
    filename: "original.js",
    content: `function calculateTotal(items) {
  let total = 0;
  for (let i = 0; i < items.length; i++) {
    total += items[i].price;
  }
  return total;
}`,
    language: "javascript",
    label: "Original",
    version: "v1.0"
  },
  {
    id: "2",
    filename: "refactored.js",
    content: `function calculateTotal(items) {
  return items.reduce((total, item) => {
    return total + item.price;
  }, 0);
}

function calculateTotalWithTax(items, taxRate = 0.1) {
  const subtotal = calculateTotal(items);
  return subtotal * (1 + taxRate);
}`,
    language: "javascript",
    label: "Refactored",
    version: "v2.0"
  },
  {
    id: "3",
    filename: "optimized.js",
    content: `const calculateTotal = (items) =>
  items.reduce((total, item) => total + item.price, 0);

const calculateTotalWithTax = (items, taxRate = 0.1) =>
  calculateTotal(items) * (1 + taxRate);

export { calculateTotal, calculateTotalWithTax };`,
    language: "javascript",
    label: "Optimized",
    version: "v3.0"
  }
]

export default function CodeCompareDemo() {
  return (
    <CodeCompare
      files={files}
      defaultView="side-by-side"
      showLineNumbers
      allowMerge
      height="400px"
    />
  )
}
```

</ComponentPreview>

### Props

| Prop | Type | Default | Description |
| --- | --- | --- | --- |
| `files` | `CompareFile[]` | - | Files to compare |
| `defaultView` | `"side-by-side" \| "unified" \| "three-way"` | `"side-by-side"` | Default comparison view |
| `showLineNumbers` | `boolean` | `true` | Show line numbers |
| `allowMerge` | `boolean` | `false` | Enable merge conflict resolution |
| `onMergeConflict` | `function` | - | Merge conflict handler |
| `syncScroll` | `boolean` | `true` | Synchronize scrolling |

## Advanced Usage

### Custom Syntax Highlighting

All components use Shiki for syntax highlighting, supporting 100+ languages and themes:

```tsx
<CodeSnippet
  code={code}
  language="rust"
  theme="github-dark"
  filename="main.rs"
/>
```

### Custom Code Execution

Implement custom code runners for the CodePreview component:

```tsx
const customRunner = async (files) => {
  // Custom execution logic
  const result = await executeCode(files);
  return result.html;
};

<CodePreview
  files={files}
  customRunner={customRunner}
/>
```

### Terminal Command Handling

Create sophisticated command handling for the terminal:

```tsx
const handleCommand = async (command) => {
  const [cmd, ...args] = command.split(' ');

  switch (cmd) {
    case 'git':
      return await handleGitCommand(args);
    case 'npm':
      return await handleNpmCommand(args);
    default:
      throw new Error(`Unknown command: ${cmd}`);
  }
};
```

## Accessibility

All components are built with accessibility in mind:

- Keyboard navigation support
- Screen reader compatibility
- ARIA labels and descriptions
- Focus management
- High contrast support

## Theming

Components support both light and dark themes and can be customized via CSS variables:

```css
.code-component {
  --code-background: hsl(var(--background));
  --code-foreground: hsl(var(--foreground));
  --code-border: hsl(var(--border));
}
```

## Performance

- Virtualized rendering for large files
- Lazy loading of syntax highlighting
- Debounced search and filtering
- Optimized diff algorithms
- Memory-efficient file handling