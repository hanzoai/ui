---
title: Music Player
description: A feature-rich audio player component with playlist support and waveform visualization.
component: true
---

<ComponentPreview name="music-player-demo" />

## Installation

<Tabs defaultValue="cli">

<TabsList>
  <TabsItem value="cli">CLI</TabsItem>
  <TabsItem value="manual">Manual</TabsItem>
</TabsList>

<TabsContent value="cli">

```bash
npx shadcn@latest add music-player
```

</TabsContent>

<TabsContent value="manual">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<ComponentSource name="music-player" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Usage

```tsx
import { MusicPlayer, Track } from "@/registry/default/ui/music-player"

const tracks: Track[] = [
  {
    id: "1",
    title: "Midnight Dreams",
    artist: "Luna Echo",
    album: "Ethereal Nights",
    duration: 245,
    src: "/audio/track1.mp3",
    artwork: "/images/album1.jpg"
  },
  {
    id: "2",
    title: "Ocean Waves",
    artist: "Azure Sounds",
    album: "Coastal Harmony",
    duration: 312,
    src: "/audio/track2.mp3",
    artwork: "/images/album2.jpg"
  },
  {
    id: "3",
    title: "Urban Pulse",
    artist: "City Lights",
    duration: 198,
    src: "/audio/track3.mp3"
  }
]

export default function MusicPlayerDemo() {
  return (
    <MusicPlayer
      tracks={tracks}
      autoPlay={false}
      showWaveform={true}
    />
  )
}
```

## Examples

### Basic Player

A simple music player without waveform visualization:

```tsx
<MusicPlayer
  tracks={tracks}
  showWaveform={false}
/>
```

### Auto-play Enabled

Start playing automatically when the component mounts:

```tsx
<MusicPlayer
  tracks={tracks}
  autoPlay={true}
/>
```

### Custom Styling

Apply custom classes to style the player:

```tsx
<MusicPlayer
  tracks={tracks}
  className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-950 dark:to-pink-950"
/>
```

## Features

### Audio Controls
- **Play/Pause**: Toggle playback with the central button
- **Skip**: Navigate between tracks with previous/next buttons
- **Seek**: Click and drag the progress bar to jump to any position
- **Volume**: Adjust volume with the slider or mute/unmute with the speaker icon

### Playlist Management
- **Track Selection**: Click any track in the playlist to play it
- **Shuffle Mode**: Randomize playback order
- **Repeat Mode**: Loop the current track
- **Visual Feedback**: Currently playing track is highlighted with animated bars

### Waveform Visualization
- **Real-time Animation**: Dynamic waveform that responds to playback
- **Gradient Styling**: Uses your theme's primary color
- **Performance Optimized**: Uses canvas for smooth 60fps animation

### Responsive Design
- **Mobile Friendly**: Touch-optimized controls
- **Keyboard Support**: Spacebar for play/pause, arrow keys for seeking
- **Accessible**: ARIA labels and keyboard navigation

## API Reference

### MusicPlayer

The main component for the music player.

| Prop | Type | Default | Description |
|------|------|---------|-------------|
| `tracks` | `Track[]` | required | Array of track objects to play |
| `className` | `string` | - | Additional CSS classes |
| `autoPlay` | `boolean` | `false` | Start playing automatically |
| `showWaveform` | `boolean` | `true` | Show animated waveform visualization |

### Track Interface

Structure for track objects:

```tsx
interface Track {
  id: string           // Unique identifier
  title: string        // Track title
  artist: string       // Artist name
  album?: string       // Album name (optional)
  duration: number     // Duration in seconds
  src: string          // Audio file URL
  artwork?: string     // Album artwork URL (optional)
}
```

## Accessibility

The music player component follows WAI-ARIA guidelines:

- Keyboard navigation support
- Screen reader announcements for state changes
- Focus indicators on interactive elements
- Proper labeling of controls

## Browser Support

The component uses standard HTML5 audio APIs and is compatible with:

- Chrome/Edge 88+
- Firefox 85+
- Safari 14+
- Opera 74+

## Notes

- Audio files should be hosted on the same domain or have proper CORS headers
- Supports common audio formats: MP3, WAV, OGG, AAC
- The waveform is generated randomly for visual effect (not actual audio analysis)
- For production use, consider implementing proper error handling and loading states

## Styling

The component uses CSS variables from your theme:

```css
/* Default theme variables used */
--background: Background color
--foreground: Text color
--primary: Primary accent color
--muted: Muted background
--muted-foreground: Muted text
--accent: Accent background
--border: Border color
```

## Performance Considerations

- Audio is streamed, not fully downloaded before playback
- Waveform animation uses requestAnimationFrame for optimal performance
- Canvas rendering is hardware-accelerated in modern browsers
- Playlist virtualization can be added for very large track lists